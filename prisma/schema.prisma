// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  quizattempt   Quizattempt[]
  quiz          Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id        String      @id @default(cuid())

  userId    String
  createdBy User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  quizattempt Quizattempt[]
  question    Question[]
}

model Quizattempt {
  id          String    @id @default(cuid())
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Int?

  quizId      String    @unique
  quiz        Quiz      @relation(fields: [quizId], references: [id])

  userId      String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  answer Answer[]
}

model Question {
  id        String   @id @default(cuid())

  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  options Options[]
  Answer  Answer[]
}

model Answer {
  id                String      @id @default(cuid())

  quizattemptid     String
  quizattempt       Quizattempt @relation(fields: [quizattemptid], references: [id], onDelete: Cascade)

  questionId        String
  question          Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  optionId          String
  options           Options     @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model Options {
  id                String      @id @default(cuid())

  questionId        String
  questions         Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  answer Answer[]
}
